import type { Query } from '@dhis2/app-service-data'
import type {
    QueryActionCreatorResult,
    QueryDefinition,
} from '@reduxjs/toolkit/query'
import { api } from '@api/api'
import type { CustomBaseQueryFn, EngineArgs } from '@api/custom-base-query'
import type { EngineError } from '@api/parse-engine-error'
import type { SingleQuery } from '@types'

// https://redux-toolkit.js.org/rtk-query/api/created-api/hooks#usequery-signature
type BaseRtkQueryResult<T> = {
    // Base query state

    // Arguments passed to the query
    originalArgs?: EngineArgs
    // The latest returned result regardless of hook arg, if present
    data?: T
    // The latest returned result for the current hook arg, if present
    currentData?: T
    // Error result if present
    error?: EngineError
    // A string generated by RTK Query
    requestId?: string
    // The name of the given endpoint for the query
    endpointName?: string
    // Timestamp for when the query was initiated
    startedTimeStamp?: number
    // Timestamp for when the query was completed
    fulfilledTimeStamp?: number

    // Derived request status booleans

    // Query has not started yet.
    isUninitialized: boolean
    // Query is currently loading for the first time. No data yet.
    isLoading: boolean
    // Query is currently fetching, but might have data from an earlier request.
    isFetching: boolean
    // Query has data from a successful load.
    isSuccess: boolean
    // Query is currently in an "error" state.
    isError: boolean

    // A function to force refetch the query - returns a Promise with additional methods
    refetch: () => QueryActionCreatorResult<
        QueryDefinition<unknown, CustomBaseQueryFn, string, unknown>
    >
}

type IsLoadingRtkQueryResult = Omit<
    BaseRtkQueryResult<unknown>,
    'data' | 'currentData' | 'error' | 'isLoading' | 'isSuccess' | 'isError'
> & {
    data: undefined
    currentData: undefined
    error: undefined
    isLoading: true
    isSuccess: false
    isError: false
}

// Note: may or may not have data
type IsErrorRtkQueryResult<T> = Omit<
    BaseRtkQueryResult<T>,
    'error' | 'isLoading' | 'isSuccess' | 'isError'
> & {
    error: EngineError
    isLoading: false
    isSuccess: false
    isError: true
}

type IsSuccessRtkQueryResult<T> = Omit<
    BaseRtkQueryResult<T>,
    'data' | 'currentData' | 'error' | 'isLoading' | 'isSuccess' | 'isError'
> & {
    data: T
    currentData: T
    error: undefined
    isLoading: false
    isSuccess: true
    isError: false
}

export type UseRtkQueryResult<T = unknown> =
    | IsLoadingRtkQueryResult
    | IsErrorRtkQueryResult<T>
    | IsSuccessRtkQueryResult<T>

export function useRtkQuery<TData = unknown>(
    query: Query | SingleQuery
): UseRtkQueryResult<TData> {
    return api.useQueryQuery(query) as UseRtkQueryResult<TData>
}
