import type { Query } from '@dhis2/app-service-data'
import type {
    SubscriptionOptions,
    QueryResultSelectorResult,
    QueryDefinition,
} from '@reduxjs/toolkit/query'
import { api } from '@api'
import type { EngineError } from '@api'
import type { SingleQuery } from '@types'

type TriggerArg = Query | SingleQuery

// https://redux-toolkit.js.org/rtk-query/api/created-api/hooks#uselazyquery-signature
type UseLazyQueryOptions = {
    pollingInterval?: number
    skipPollingIfUnfocused?: boolean
    refetchOnReconnect?: boolean
    refetchOnFocus?: boolean
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    selectFromResult?: (result: any) => any
}

type UseLazyQueryTrigger<T> = (
    arg: TriggerArg,
    preferCacheValue?: boolean
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => Promise<QueryResultSelectorResult<QueryDefinition<any, any, any, any>>> & {
    // Whatever argument was provided to the query
    arg: unknown
    // A string generated by RTK Query
    requestId: string
    // The values used for the query subscription
    subscriptionOptions: SubscriptionOptions

    // A method to cancel the query promise
    abort: () => void
    // A method to unwrap the query call and provide the raw response/error
    unwrap: () => Promise<T>
    // A method used to manually unsubscribe from the query results
    unsubscribe: () => void
    // A method used to re-run the query. In most cases when using a lazy query, you will never use this and should prefer to call the trigger again.
    refetch: () => void
    // A method used to update the subscription options (eg. pollingInterval)
    updateSubscriptionOptions: (options: SubscriptionOptions) => void
}

type BaseLazyQueryStateResult<T> = {
    // Base query state

    // Arguments passed to the query
    originalArgs?: unknown
    // The latest returned result regardless of hook arg, if present
    data?: T
    // The latest returned result for the current hook arg, if present
    currentData?: T
    // Error result if present
    error?: unknown
    // A string generated by RTK Query
    requestId?: string
    // The name of the given endpoint for the query
    endpointName?: string
    // Timestamp for when the query was initiated
    startedTimeStamp?: number
    // Timestamp for when the query was completed
    fulfilledTimeStamp?: number

    // Derived request status booleans

    // Query has not started yet.
    isUninitialized: boolean
    // Query is currently loading for the first time. No data yet.
    isLoading: boolean
    // Query is currently fetching, but might have data from an earlier request.
    isFetching: boolean
    // Query has data from a successful load.
    isSuccess: boolean
    // Query is currently in an "error" state.
    isError: boolean
}

type UseLazyQueryLastPromiseInfo = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    lastArg: any
}

type IsUninitializedLazyRtkQueryResult = Omit<
    BaseLazyQueryStateResult<unknown>,
    | 'currentData'
    | 'data'
    | 'error'
    | 'isError'
    | 'isLoading'
    | 'isSuccess'
    | 'isUninitialized'
> & {
    currentData: undefined
    data: undefined
    error: undefined
    isError: false
    isLoading: false
    isSuccess: false
    isUninitialized: true
}

type IsLoadingLazyRtkQueryResult = Omit<
    BaseLazyQueryStateResult<unknown>,
    | 'currentData'
    | 'data'
    | 'error'
    | 'isError'
    | 'isLoading'
    | 'isSuccess'
    | 'isUninitialized'
> & {
    currentData: undefined
    data: undefined
    error: undefined
    isError: false
    isLoading: true
    isSuccess: false
    isUninitialized: false
}

// Note: may or may not have data
type IsErrorLazyRtkQueryResult<T> = Omit<
    BaseLazyQueryStateResult<T>,
    'error' | 'isError' | 'isLoading' | 'isSuccess' | 'isUninitialized'
> & {
    error: EngineError
    isError: true
    isLoading: false
    isSuccess: false
    isUninitialized: false
}

type IsSuccessLazyRtkQueryResult<T> = Omit<
    BaseLazyQueryStateResult<T>,
    | 'currentData'
    | 'data'
    | 'error'
    | 'isError'
    | 'isLoading'
    | 'isSuccess'
    | 'isUninitialized'
> & {
    currentData: T
    data: T
    error: undefined
    isError: false
    isLoading: false
    isSuccess: true
    isUninitialized: false
}

export type UseRtkLazyQueryResult<T = unknown> =
    | IsUninitializedLazyRtkQueryResult
    | IsLoadingLazyRtkQueryResult
    | IsErrorLazyRtkQueryResult<T>
    | IsSuccessLazyRtkQueryResult<T>

type UseRtkLazyQueryReturnValue<T> = [
    UseLazyQueryTrigger<TriggerArg>,
    UseRtkLazyQueryResult<T>,
    UseLazyQueryLastPromiseInfo
]

export function useRtkLazyQuery<TData = unknown>(
    options?: UseLazyQueryOptions
): UseRtkLazyQueryReturnValue<TData> {
    return api.useLazyQueryQuery(options) as UseRtkLazyQueryReturnValue<TData>
}
