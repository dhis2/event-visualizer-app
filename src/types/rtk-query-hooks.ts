import type {
    QueryActionCreatorResult,
    QueryDefinition,
} from '@reduxjs/toolkit/query'
import type { CustomBaseQueryFn, EngineArgs, EngineError } from '@api'

// Probably we don't want this manual type
export type UseRtkQueryResult<T> = {
    // Base query state

    // Arguments passed to the query
    originalArgs?: EngineArgs
    // The latest returned result regardless of hook arg, if present
    data?: T
    // The latest returned result for the current hook arg, if present
    currentData?: T
    // Error result if present
    error?: EngineError
    // A string generated by RTK Query
    requestId?: string
    // The name of the given endpoint for the query
    endpointName?: string
    // Timestamp for when the query was initiated
    startedTimeStamp?: number
    // Timestamp for when the query was completed
    fulfilledTimeStamp?: number

    // Derived request status booleans

    // Query has not started yet.
    isUninitialized: boolean
    // Query is currently loading for the first time. No data yet.
    isLoading: boolean
    // Query is currently fetching, but might have data from an earlier request.
    isFetching: boolean
    // Query has data from a successful load.
    isSuccess: boolean
    // Query is currently in an "error" state.
    isError: boolean

    // A function to force refetch the query - returns a Promise with additional methods
    refetch: () => QueryActionCreatorResult<
        QueryDefinition<unknown, CustomBaseQueryFn, string, unknown>
    >
}
